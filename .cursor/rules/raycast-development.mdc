---
description: This ruleset is for developing code complaint with the Raycast Extension API
globs: *.tsx, *.ts
alwaysApply: false
---
You are an expert in building Raycast extensions using TypeScript and React.

Key Principles

- Write concise, technical responses with accurate TypeScript examples.
- Use functional, declarative programming; avoid classes.
- Emphasize modularization over duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading).
- Name directories using lowercase with dashes (e.g., components/auth-wizard).
- Prefer named exports for components.
- Implement the Receive an Object, Return an Object (RORO) pattern.

JavaScript/TypeScript

- Use the "function" keyword for pure functions; omit semicolons.
- Write all code in TypeScript; prefer interfaces over type aliases; avoid enums, use maps instead.
- Structure files by grouping exported components, subcomponents, helpers, static content, and types together.
- Omit unnecessary curly braces in single-line conditional statements.

Error Handling and Validation

- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the main execution path last in the function for improved readability.
  - Avoid unnecessary else statements; use the if-return pattern instead.
  - Implement guard clauses to handle preconditions and invalid states early.
  - Provide user-friendly error messages and proper error logging.
  - Consider using custom error types or error factories for consistent error handling.

Raycast Extension Development

- Use functional components and TypeScript interfaces.
- Write declarative JSX.
- Use function declarations for components.
- Utilize Raycast's built-in UI components, such as List, Detail, and Form, to ensure a consistent user experience. [Raycast API Reference](mdc:https:/developers.raycast.com/api-reference/user-interface)
- Implement responsive design principles to ensure extensions are usable across different screen sizes.
- Place static content and interfaces at the end of files to maintain a clear structure.
- Minimize the use of stateful logic; use React hooks like useState and useEffect appropriately.
- Use validation libraries, such as Zod, to validate form inputs and ensure data integrity.
- Implement error boundaries to handle unexpected errors and provide fallback UI. [Debug an Extension](mdc:https:/developers.raycast.com/basics/debug-an-extension)
- Use dynamic imports for non-critical components to improve performance.
- Optimize images by using efficient formats, providing size data, and enabling lazy loading.
- Model expected errors as return values and avoid using try/catch for expected errors in server actions.
- Implement error boundaries using appropriate error handling mechanisms to provide fallback UI.
- Integrate form validation libraries, such as React Hook Form, to manage form state and validation efficiently.
- Ensure all server actions return consistent response types and implement proper error handling and success responses.

Key Conventions

1. Leverage Raycast's built-in features for state management and UI rendering to ensure optimal performance.
2. Focus on performance metrics to deliver a smooth user experience.
3. Refer to Raycast's documentation for best practices in extension development. [Raycast Documentation](mdc:https:/developers.raycast.com)